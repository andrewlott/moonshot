# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  workflow_dispatch:
    branches:
      - master
  release:
    types: [created]

name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: moonshot-repository
        IMAGE_TAG: ${{ github.sha }}
        UNITY_USERNAME: ${{ secrets.UNITY_USERNAME }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
      run: |
        # Build image
        docker build \
        -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
        --build-arg IMAGE_NAME=$IMAGE_NAME \
        --build-arg UNITY_USERNAME=$UNITY_USERNAME \
        --build-arg UNITY_PASSWORD=$UNITY_PASSWORD \
        --build-arg UNITY_SERIAL=$UNITY_SERIAL \
        .
        # Push image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Deploy to Amazon ECS
      id: ecs-cli-compose
      env:
        CONTAINER_NAME: moonshot-server
        IMAGE_NAME: ${{ steps.build-image.outputs.image }}
        AWS_UDP_TARGET_GROUP_ARN: ${{ secrets.AWS_UDP_TARGET_GROUP_ARN }}
        AWS_TCP_TARGET_GROUP_ARN: ${{ secrets.AWS_TCP_TARGET_GROUP_ARN }}
      run: |
        # Download ecs-cli
        sudo curl -Lo /usr/local/bin/ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-linux-amd64-latest
        sudo chmod +x /usr/local/bin/ecs-cli
        ecs-cli --version
        # Create and push container
        ecs-cli compose \
        --file docker-compose.yml \
        --file docker-compose-aws.yml \
        --ecs-params ecs-params.yml \
        --cluster moonshot-cluster \
        service up \
        --launch-type FARGATE \
        --target-groups="targetGroupArn=$AWS_UDP_TARGET_GROUP_ARN,containerName=$CONTAINER_NAME,containerPort=7777" \
        --target-groups="targetGroupArn=$AWS_TCP_TARGET_GROUP_ARN,containerName=$CONTAINER_NAME,containerPort=7778" \
        --create-log-groups
        # Check status
        ecs-cli compose ps
